{
  
    
        "post0": {
            "title": "Title",
            "content": "&lt;/figure&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Python - Refer&#234;ncias Resumidas . Esse notebook contém referências em Python, com comentários reduzidos . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Coment&#225;ros e print() . #Sou um comentário! Quando há texto após uma hashtag, esse texto não afeta o código. . print(&quot;Olá&quot;) . Olá . Opera&#231;&#245;es com n&#250;meros . 5 + 5 #adição . 10 . 5 * 5 #multiplicação . 25 . 5 / 5 #divisão . 1.0 . 5 ** 2 #potência . 25 . 4 % 2 #resto de 4 dividido por 2 . 0 . 5 % 2 #resto de 5 dividido por 2 . 1 . (5 + 5) * (5 -1) #ordem das operações . 40 . 4/5 #numeros com casas decimais são denominados &quot;fluatuantes&quot; (float) . 0.8 . Strings (textos) . &#39;sou uma string&#39; #pode-se criar uma string com aspas simples . &#39;sou uma string&#39; . &quot;também sou uma string&quot; #pode-se criar uma string com aspas duplas . &#39;também sou uma string&#39; . &quot; sou uma string com &#39;aspas simples&#39;&quot; #para usar aspas simples dentro da string, cria se a string #entre aspas duplas. . &#34; sou uma string com &#39;aspas simples&#39;&#34; . &#39; sou uma string com &quot;aspas duplas&quot;&#39; #para usar aspas duplas dentro da string, cria se a string #entre aspas simples. . &#39; sou uma string com &#34;aspas duplas&#34;&#39; . print(&quot;sou uma string&quot;.title()) # .title() faz com que a primeira letra de cada palavra fique maiúscula . Sou Uma String . print(&quot;sou uma string&quot;.lower()) # .lower() faz com que todas as letras seja minúsculas . sou uma string . print(&quot;sou uma string&quot;.upper()) # .upper() faz com que todas as letras seja maiúsculas . SOU UMA STRING . Booleans e comparadores . True #verdadeiro . True . False #falso . False . 1 &gt; 2 # falso . False . 1 &lt; 2 # verdadeiro . True . 10 &gt;= 10 #maior ou igual (verdadeiro para a condição) . True . 10 &lt;= 40 #menor ou igual (verdadeiro para a condição) . True . 1 == 1 #verdadeiro . True . &#39;palavra&#39; == &#39;word&#39; #falso . False . &#39;palavra&#39; == &#39;palavra&#39; #verdadeiro . True . Conectivos . (50 &gt; 100) and (100 &lt; 300) # E (as duas condições precisam ser satisfeitas) . False . (10 &gt; 20) or (20 &lt; 30) # OU (apenas uma das condições precisa ser satisfeita) . True . (10 == 10.5) or (2 == 3) or (4 == 4) . True . if, elif, else . if 10 &lt; 20: print(&#39;Correto!&#39;) # condição satisfeita, o resultado será impresso . Correto! . if 1 &lt; 2: print(&quot; Um é menor que dois!&quot;) # condição satisfeita, o resultado será impresso . Um é menor que dois! . if 1 &lt; 2: print(&#39;Certo&#39;) # condição satisfeita, o resultado será impresso else: print(&#39;Errado&#39;) . Certo . if 1 &gt; 2: print(&#39;Certo&#39;) else: print(&#39;Errado&#39;) # condição não satisfeita, o resultado do &quot;else&quot; será impresso . Errado . if 1 == 2: print(&#39;primeira condição&#39;) elif 3 == 3: print(&#39;segunda condição&#39;) else: print(&#39;Nenhuma das condições&#39;) # a segunda condição é verdadeira . segunda condição . Vari&#225;veis . Você pode pensar em variáveis como palavras que armazenam um valor. Simples assim: . variavel = 20 # define que 20 será armazenado na palavra variável . variavel # &quot;chamando&quot; a variável . 20 . two = 2 palavra = &#39;palavra&#39; #definindo mais de uma variável . idade = 25 nome = &#39;John&#39; . print(idade,nome) . 25 John . print(&#39;Meu nome é: {}, minha idade é: {}&#39;.format(nome,idade)) # Com {} e .format() você substitui textos por variáveis: . Meu nome é: John, minha idade é: 25 . Também é possível criar variáveis a partir de valores de outras variáveis: . x = 2 y = 3 . z = x + y # z é a soma de x e y, que podem ser quaisquer valores, mas nesse caso são 2 e 3. . z . 5 . Listas . [5,10,15] # listas utilizam [] . [5, 10, 15] . [&#39;palavras&#39;,5,(5*5),nome] # é possível armazenar diferentes tipos de dados . [&#39;palavras&#39;, 5, 25, &#39;John&#39;] . Pode-se adicionar um item à lista: . lista = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] # uma variável (lista) que contem uma lista . lista.append(&#39;d&#39;) #append adiciona um item à lista . lista # nossa lista após o append . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] . lista[0] #0 indexa o primeiro item da lista . &#39;a&#39; . lista[1] #1 indexa o segundo item da lista . &#39;b&#39; . lista[1:] # o que vem antes dos dois pontos é o ponto de partida da seleção. #Nesse caso, seleciona-se do segundo item até o último . [&#39;b&#39;, &#39;c&#39;, &#39;d&#39;] . lista[:2] # o que vem depois dos dois pontos é o ponto de chegada da seleção. # Nesse caso, seleciona-se do primeiro item até o terceiro[2] . [&#39;a&#39;, &#39;b&#39;] . lista[0] = &#39;NEW&#39; # substitui o elemento desjado . lista #lista após substituição . [&#39;NEW&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] . del lista[2] #deleta o terceiro item da lista . lista #lista após a remoção do item . [&#39;NEW&#39;, &#39;b&#39;, &#39;d&#39;] . len(lista) #verifica a quantidade de itens presentes na lista. . 3 . nest = [1,2,3,[4,5,[&#39;ola&#39;,&quot;pessoal&quot;]]] # É possível armazenar listas dentro de listas (nested list) #os [] dentro da lista criam outras listas . nest[3] # o quarto item da lista nest é também uma lista . [4, 5, [&#39;ola&#39;, &#39;pessoal&#39;]] . nest[3][2] #localiza o elemento dentro da lista armazenda na list nest . [&#39;ola&#39;, &#39;pessoal&#39;] . nest[3][2][0] # localiza o primeiro elemento dentro da lista que estava armazenada dentro lista nest . &#39;ola&#39; . Dicion&#225;rios . d = {&#39;chave1&#39;:&#39;item1&#39;,&#39;chave2&#39;:&#39;item2&#39;} # dicionários são criados com {} e possuem chaves e valores . d #mostrando o dicionário criado . {&#39;chave1&#39;: &#39;item1&#39;, &#39;chave2&#39;: &#39;item2&#39;} . d[&#39;chave1&#39;] # aqui, requisitamos o valor presente na chave1 . &#39;item1&#39; . d[&#39;chave3&#39;]=&quot;item3&quot; # é também possível adicionar chaves e valores ao dicionário, como no exemplo. . d # o dicionário após a adição da chave3 . {&#39;chave1&#39;: &#39;item1&#39;, &#39;chave2&#39;: &#39;item2&#39;, &#39;chave3&#39;: &#39;item3&#39;} . Tuplas . t = (1,2,3) #tuplas são criadas com () e são imutáveis . t[0] . 1 . t[0] = &#39;NOVA&#39; # não é possível alterá-la, por isso um erro ocorrerá! . TypeError Traceback (most recent call last) &lt;ipython-input-70-f21d1083cc30&gt; in &lt;module&gt;() -&gt; 1 t[0] = &#39;NOVA&#39; # não é possível alterá-la, por isso um erro ocorrerá! TypeError: &#39;tuple&#39; object does not support item assignment . Loops - for: . minha_lista = [1,2,3,4,5,&quot;olá&quot;,&#39;mundo&#39;] # criando uma nova lista com números inteiros e palavras . for item in minha_lista: # neste for loop, é solicitado que cada item presente na print(item) # lista criada seja impresso. . 1 2 3 4 5 olá mundo . for item in minha_lista: # neste for loop, para cada item da lista reconhecido, print(&#39;Looping&#39;) # é solicitado que imprima a palavra &quot;Looping&quot; . Looping Looping Looping Looping Looping Looping Looping . for i in minha_lista: #neste for loop, é solicitado que cada elemento da lista seja multiplicado por 2. print(2*i) # É importante perceber a diferença entre o comportamento do operador com números e strings. . 2 4 6 8 10 oláolá mundomundo . Loops - while . i = 1 while i &lt; 5: #enquanto a condição solicitada for verdadeira (i menor que 5) print(&#39;i is: {}&#39;.format(i)) # o loop será executado. i = i+1 . i is: 1 i is: 2 i is: 3 i is: 4 . i = 3 while i &lt; 7: #enquanto a condição solicitada for verdadeira (i menor que 7) print(&#39;i is: {}&#39;.format(i)) # o loop será executado. i = i+1 #o i é atualizado ao fim do loop . i is: 3 i is: 4 i is: 5 i is: 6 . range() . range(0,5) #define um intervalo . range(0, 5) . for i in range(0,5): # define que o loop será executado enquanto i estiver dentro do range print(&quot;O número é: {} &quot;.format(i)) . O número é: 0 O número é: 1 O número é: 2 O número é: 3 O número é: 4 . list(range(2,7)) # transforma o range em uma lista de valores . [2, 3, 4, 5, 6] . List comprehension . x = [1,2,3,4] #cria uma nova lista . out = [] #aqui é criado um loop para elevar os elementos da lista x à for item in x: # potencia de 2. out.append(item**2) print(out) . [1, 4, 9, 16] . [item**2 for item in x] #aqui temos uma forma pythonica de realizar a mesma tarefa, com apenas uma #linha de código . [1, 4, 9, 16] . Fun&#231;&#245;es . def my_func(frase): #def é a palvra usada para criar a função. Após isso, vem o nome da função print(frase) #e dentro do parêntese vêm os parâmetros. Nessa caso, criamos uma função que vai #imprimir a frase que desejarmos. . my_func(&quot;Olá mundo&quot;) #A frase é &quot;Olá mundo&quot; . Olá mundo . my_func(&quot;Estou no curso de Data Science&quot;) #Com uma segunda frase . Estou no curso de Data Science . def multiplicar_por_2(x): #Nesse caso, criamos uma função que multiplica por 2. return x*2 . resultado = multiplicar_por_2(5) #Aplicando a função no número . resultado . 10 . mult_palavra = multiplicar_por_2(&#39;Olá &#39;) #Pode-se aplicar com strings também, mas o comportamento é outro. mult_palavra . &#39;Olá Olá &#39; . def funcao_mais_complexa(x,y,z): #x,y,z são os parâmetros soma = x+y+z #a função cria a variável soma mult = x*y*z #a função cria a variável mult print(&quot;A soma de x, y e z é: &quot;, soma) #a função imprime o solicitado print(&quot;A multiplicação de x, y e z é: &quot;, mult) . funcao_mais_complexa(5,2,3) . A soma de x, y e z é: 10 A multiplicação de x, y e z é: 30 . &lt;/figure&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;",
            "url": "https://viniciusbg.github.io/color-to-old-pcs/2020/06/06/python-cheat-notebook.html",
            "relUrl": "/2020/06/06/python-cheat-notebook.html",
            "date": " • Jun 6, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Color to old pictures",
            "content": "My great-grandfather, who used to build and burn a Judas in Tiradentes-MG-Brazil. . My grandparents marriage! . Grandma, Grandpa and uncles sometime ago... .",
            "url": "https://viniciusbg.github.io/color-to-old-pcs/deeplearning/2020/05/15/color-to-pic.html",
            "relUrl": "/deeplearning/2020/05/15/color-to-pic.html",
            "date": " • May 15, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://viniciusbg.github.io/color-to-old-pcs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://viniciusbg.github.io/color-to-old-pcs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}